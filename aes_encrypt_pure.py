from key_expansion import expand_key_128_bits

sbox = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]


def get_hex_str(byte):
    hexa = hex(byte)[2:]
    while len(hexa) < 2:
        hexa = "0" + hexa
    return hexa


def show_word(word):
    for byte in word:
        hexa = get_hex_str(byte)
        print(hexa, end=" ")


def show_state(word_list):
    print(word_list)
    print("┌─────────────┐")
    for nb, word in enumerate(word_list):
        print("│ ", end="")
        show_word(word)
        print("│")
    print("└─────────────┘")

def sub_word(word):
    subbed_word = []
    for byte in word:
        subbed_word.append(sub_byte(byte))
    return subbed_word


def sub_byte(byte):
    first, last = get_hex_str(byte)[:1], get_hex_str(byte)[1:]
    first_nb, last_nb = int(first,16), int(last,16)
    box_pos = 16*first_nb + last_nb
    return sbox[box_pos]


def sub_state(state_list):
    sub_state = []
    for word in state_list:
        sub_state.append(sub_word(word))

    return sub_state


def xor_word(word1, word2):
    new_word = []
    for i in range(len(word1)):
        new_word.append(word1[i] ^ word2[i])
    return new_word


def xor_state(state_list, key_words):
    xored_state = []
    for i in range(4):
        xored_state.append(xor_word(state_list[i], key_words[i]))

    return xored_state


def shift_rows(state_list):
    column_state = [list(x) for x in zip(*state_list)]
    for i in range(4):
        for j in range(i):
            first_byte = column_state[i].pop(0)
            column_state[i].append(first_byte)
    new_state_list = [list(x) for x in zip(*column_state)]

    return new_state_list


def times_3(nb):
    return times_2(nb) ^ nb


def times_2(nb):
    # left-shift and if first bit == 1 -> xor with 0x1b, mod 100 to keep in range
    if nb < 0x80:
        res = (nb << 1)
    else:
        res = (nb << 1) ^ 0x1b

    return res % 0x100


def mix_columns(state):
    for row in range(4):

        s0 = times_2(state[row][0])     ^ times_3(state[row][1])    ^ state[row][2]             ^ state[row][3]
        s1 = state[row][0]              ^ times_2(state[row][1])    ^ times_3(state[row][2])    ^ state[row][3]
        s2 = state[row][0]              ^ state[row][1]             ^ times_2(state[row][2])    ^ times_3(state[row][3])
        s3 = times_3(state[row][0])     ^ state[row][1]             ^ state[row][2]             ^ times_2(state[row][3])

        state[row][0] = s0
        state[row][1] = s1
        state[row][2] = s2
        state[row][3] = s3

    return state


def first_round(state_list, round_key_words):
    return xor_state(state_list, round_key_words[0:4])


def round_n(state_list, n, round_key_words):
    state_list = sub_state(state_list)
    state_list = shift_rows(state_list)
    state_list = mix_columns(state_list)
    state_list = xor_state(state_list,round_key_words[n*4:n*4+4])

    return state_list


def last_round(state_list, round_key_words):
    n=10
    state_list = sub_state(state_list)
    state_list = shift_rows(state_list)
    state_list = xor_state(state_list,round_key_words[n*4:n*4+4])

    return state_list


def aes_128(state, key):
    round_key_words = expand_key_128_bits(key)
    state = first_round(state,round_key_words)
    for i in range(1,10):
        state = round_n(state, i, round_key_words)
    state = last_round(state,round_key_words)

    return state


if __name__ == "__main__":
    state_to_encrypt = [[0x32, 0x43, 0xf6, 0xa8], [0x88, 0x5a, 0x30, 0x8d], [0x31, 0x31, 0x98, 0xa2], [0xe0, 0x37, 0x07, 0x34]]
    key_to_use = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]
    show_state(aes_128(state_to_encrypt,key_to_use))